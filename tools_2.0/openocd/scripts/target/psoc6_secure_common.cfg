#
# Configuration script for Cypress PSoC 64 family of microcontrollers (CY8C6xxx).
# PSoC 64 is a dual-core device with CM0+ and CM4 cores. Both cores share
# the same Flash/RAM/MMIO address space.
#

source [find mem_helper.tcl]

set MAIN_FLASH_SIZE $_FLASH_RESTRICTION_SIZE
source [find target/cy_get_set_device_param.cfg]

if {[using_jtag]} {
	puts stderr "JTAG transport not supported by selected target, please switch to SWD"
	shutdown
}

global _ENABLE_POWER_SUPPLY
if { [adapter_name] eq "kitprog3" } {
	if { [info exists ENABLE_POWER_SUPPLY] } {
		set _ENABLE_POWER_SUPPLY $ENABLE_POWER_SUPPLY
	} else {
		set _ENABLE_POWER_SUPPLY 0
	}
} else {
	set _ENABLE_POWER_SUPPLY 0
}

if { $_ENABLE_POWER_SUPPLY } {
	echo "** Enabling target power ($_ENABLE_POWER_SUPPLY mV) \"set ENABLE_POWER_SUPPLY 0\" to disable"
	kitprog3 power_config on $_ENABLE_POWER_SUPPLY
}

set show_device_info_runned 0
proc show_device_info { target main_region_name } {
	global show_device_info_runned
	global _FLASH_DRIVER_NAME
	global _FLASH_RESTRICTION_SIZE

	# Exit if target was not examined
	if { [$target was_examined] == 0 } { return }

	if {$show_device_info_runned == 0} {
		echo "***************************************"
		switch $_FLASH_DRIVER_NAME {
			"psoc6" {
				psoc6_detect_geometry $_FLASH_DRIVER_NAME $main_region_name
			}
			"psoc6_2m" {
				psoc6_detect_geometry $_FLASH_DRIVER_NAME $main_region_name
			}
		}
		show_flash_boot_ver $_FLASH_DRIVER_NAME
		echo "***************************************"
		set show_device_info_runned 1
	}
}

adapter_khz 1500

if { [info exists ACQUIRE_TIMEOUT] } {
	set _ACQUIRE_TIMEOUT $ACQUIRE_TIMEOUT
} else {
	set _ACQUIRE_TIMEOUT 15000
}
echo "** Using ACQUIRE_TIMEOUT: $_ACQUIRE_TIMEOUT ms"

if { [info exists POWERUP_DELAY] } {
	set _POWERUP_DELAY $POWERUP_DELAY
} else {
	set _POWERUP_DELAY 5000
}
echo "** Using POWERUP_DELAY: $_POWERUP_DELAY ms"

proc power_dropout {} {
	global _POWERUP_DELAY
	echo "** Waiting for target to boot ($_POWERUP_DELAY ms), use 'set POWERUP_DELAY' to override"
	sleep $_POWERUP_DELAY
}

if { [info exists ENABLE_EFUSE] } {
	set _ENABLE_EFUSE $ENABLE_EFUSE
} else {
	set _ENABLE_EFUSE 0
}

if {$_ENABLE_EFUSE} {
	echo "** eFuse Flash Bank enabled"
}

if { ![info exists TARGET_AP] } {
	set TARGET_AP "sys_ap"
	echo "** TARGET_AP not defined, using 'sys_ap' by default"
}
echo "** Using TARGET_AP: $TARGET_AP"

if { $TARGET_AP eq "sys_ap" } {
	set _ENABLE_SYSAP 1
	set _ENABLE_CM0   0
	set _ENABLE_CM4   0
} elseif { $TARGET_AP eq "cm0_ap" } {
	set _ENABLE_SYSAP 0
	set _ENABLE_CM0   1
	set _ENABLE_CM4   0
} elseif { $TARGET_AP eq "cm4_ap" } {
	set _ENABLE_SYSAP 0
	set _ENABLE_CM0   0
	set _ENABLE_CM4   1
} else {
	puts stderr "Error: Invalid TARGET_AP: $TARGET_AP, please use one of the following: sys_ap, cm0_ap, cm4_ap"
	shutdown
}

global TARGET
set TARGET $_CHIPNAME.cpu
swd newdap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf
dap create $_CHIPNAME.dap -chain-position $_CHIPNAME.cpu

proc init_reset { mode } {
	global _RESET_MODE
	set _RESET_MODE $mode

	if {[using_jtag]} {
		jtag arp_init-reset
	}
}

proc reset_deassert_post {} {
	global _RESET_MODE
	global _ACQUIRE_TIMEOUT
	global _FLASH_DRIVER_NAME

	if {$_RESET_MODE == "run"} {
		psoc6 secure_acquire $_FLASH_DRIVER_NAME run $_ACQUIRE_TIMEOUT
	} else {
		psoc6 secure_acquire $_FLASH_DRIVER_NAME halt $_ACQUIRE_TIMEOUT
	}
}

if { $_ENABLE_SYSAP } {
	target create ${TARGET}.sysap mem_ap -dap $_CHIPNAME.dap -ap-num 0 -coreid 255
	${TARGET}.sysap configure -work-area-phys $_WORKAREAADDR -work-area-size $_WORKAREASIZE -work-area-backup 0
	${TARGET}.sysap configure -event examine-end "show_device_info ${TARGET}.sysap main_sysap"
	${TARGET}.sysap configure -event reset-deassert-post "reset_deassert_post"

	flash bank ${_CHIPNAME}_main_sysap		$_FLASH_DRIVER_NAME 0x10000000 0 0 0 ${TARGET}.sysap external
	flash bank ${_CHIPNAME}_work_sysap		$_FLASH_DRIVER_NAME 0x14000000 0 0 0 ${TARGET}.sysap external
	flash bank ${_CHIPNAME}_sflash_sysap	$_FLASH_DRIVER_NAME 0x16000000 0 0 0 ${TARGET}.sysap external
	if {$_ENABLE_EFUSE} {
		flash bank ${_CHIPNAME}_efuse_sysap		${_FLASH_DRIVER_NAME}_efuse 0x90700000 1024 1 1 ${TARGET}.sysap external
	}
}

if { $_ENABLE_CM0 } {
	target create ${TARGET}.cm0 cortex_m -dap $_CHIPNAME.dap -ap-num 1 -coreid 1 -defer-examine
	${TARGET}.cm0 configure -work-area-phys $_WORKAREAADDR_CM -work-area-size $_WORKAREASIZE_CM -work-area-backup 0
	${TARGET}.cm0 configure -event examine-end "show_device_info ${TARGET}.cm0 main_cm0"
	${TARGET}.cm0 configure -event reset-deassert-post "reset_deassert_post"
	${TARGET}.cm0 configure -event gdb-start "mww 0x40260100 0"
	${TARGET}.cm0 configure -event gdb-attach " \
		${TARGET}.cm0 arp_examine; \
		${TARGET}.cm0 arp_halt; \
		${TARGET}.cm0 arp_waitstate halted 1000; \
		show_device_info ${TARGET}.cm0 main_cm0; \
	"

	flash bank ${_CHIPNAME}_main_cm0		$_FLASH_DRIVER_NAME 0x10000000 0 0 0 ${TARGET}.cm0 external
	flash bank ${_CHIPNAME}_work_cm0		$_FLASH_DRIVER_NAME 0x14000000 0 0 0 ${TARGET}.cm0 external
	flash bank ${_CHIPNAME}_sflash_cm0		$_FLASH_DRIVER_NAME 0x16000000 0 0 0 ${TARGET}.cm0 external
	if {$_ENABLE_EFUSE} {
		flash bank ${_CHIPNAME}_efuse_cm0		${_FLASH_DRIVER_NAME}_efuse 0x90700000 1024 1 1 ${TARGET}.cm0 external
	}

	if { ![info exists DISABLE_SMIF] } {
		flash bank ${_CHIPNAME}_smif_cm0	cmsis_flash 0x18000000 0 4 4 ${TARGET}.cm0 ../flm/cypress/psoc6/$_QSPI_FLASHLOADER 0x1000
	}
}

if { $_ENABLE_CM4 } {
	target create ${TARGET}.cm4 cortex_m -dap $_CHIPNAME.dap -ap-num 2 -coreid 2 -defer-examine
	${TARGET}.cm4 configure -work-area-phys $_WORKAREAADDR_CM -work-area-size $_WORKAREASIZE_CM -work-area-backup 0
	${TARGET}.cm4 configure -event examine-end "show_device_info ${TARGET}.cm4 main_cm4"
	${TARGET}.cm4 configure -event reset-deassert-post "reset_deassert_post"
	${TARGET}.cm4 configure -event gdb-start "mww 0x40260100 0"
	${TARGET}.cm4 configure -event gdb-attach " \
		${TARGET}.cm4 arp_examine; \
		${TARGET}.cm4 arp_halt; \
		${TARGET}.cm4 arp_waitstate halted 1000; \
		show_device_info ${TARGET}.cm4 main_cm4; \
	"

	flash bank ${_CHIPNAME}_main_cm4		$_FLASH_DRIVER_NAME 0x10000000 0 0 0 ${TARGET}.cm4 external
	flash bank ${_CHIPNAME}_work_cm4		$_FLASH_DRIVER_NAME 0x14000000 0 0 0 ${TARGET}.cm4 external
	flash bank ${_CHIPNAME}_sflash_cm4		$_FLASH_DRIVER_NAME 0x16000000 0 0 0 ${TARGET}.cm4 external
	if {$_ENABLE_EFUSE} {
		flash bank ${_CHIPNAME}_efuse_cm4		${_FLASH_DRIVER_NAME}_efuse 0x90700000 1024 1 1 ${TARGET}.cm4 external
	}

	if { ![info exists DISABLE_SMIF] } {
		flash bank ${_CHIPNAME}_smif_cm4	cmsis_flash 0x18000000 0 4 4 ${TARGET}.cm4 ../flm/cypress/psoc6/$_QSPI_FLASHLOADER 0x1000
	}
}

psoc6 add_safe_sflash_region 0x16000800 0x800 0xEE
psoc6 add_safe_sflash_region 0x16001A00 0x200 0xC0
psoc6 add_safe_sflash_region 0x16005A00 0xC00 0xEE
psoc6 add_safe_sflash_region 0x16007C00 0x400 0xEE

proc erase_all {} {
	lset banks [flash list]
	for {set i [expr [llength $banks] - 1]} { $i >= 0 } { set i [expr $i - 1]} {
		set bank [lindex $banks $i]
		if { $bank(base) == 0x10000000 || \
			 $bank(base) == 0x14000000 || \
			 $bank(base) == 0x18000000 } {
			 echo "Erasing flash bank @[format 0x%08X $bank(base)]..."
			 catch {flash erase_sector $i 0 last}
		}
	}
}

add_help_text erase_all "Erases all flash banks (in reverse order, for SMIF compatibility)"

reset_config srst_only srst_gates_jtag
